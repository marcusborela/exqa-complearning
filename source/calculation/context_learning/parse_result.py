import torch
from transformers import GPTNeoForCausalLM, GPT2Tokenizer

gen_tokens = torch.tensor([[6310, 622, 16175, 28749, 25, 955, 2779, 645, 2420, 78, 450, 64, 844, 78, 11, 3031, 64, 28141, 583, 70, 44424, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13], [6310, 622, 16175, 28749, 25, 955, 2779, 645, 2420, 78, 450, 64, 844, 78, 11, 3031, 64, 28141, 583, 70, 44424, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660], [6310, 622, 16175, 28749, 25, 955, 2779, 645, 2420, 78, 450, 64, 844, 78, 11, 3031, 64, 28141, 583, 70, 44424, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 9537, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13], [6310, 622, 16175, 28749, 25, 955, 2779, 645, 2420, 78, 450, 64, 844, 78, 11, 3031, 64, 28141, 583, 70, 44424, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418], [6310, 622, 16175, 28749, 25, 955, 2779, 645, 2420, 78, 450, 64, 844, 78, 11, 3031, 64, 28141, 583, 70, 44424, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 5990, 70, 44424, 25, 46181, 267, 7758, 17899, 640, 466, 39452, 346, 30, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11, 267, 7758, 17899, 640, 11, 12385, 949, 3099, 16513, 8836, 24660, 13, 978, 2634, 76, 12379, 275, 291, 1548, 8326, 11, 795, 6303, 11, 304, 84, 19783, 3099, 257, 3032, 430, 390, 1055, 781, 321, 13561, 12523, 13, 220, 9463, 368, 11, 627, 25440, 823, 72, 28686, 3188, 418, 466, 30105, 11, 1715, 672, 380, 8358, 795, 6303, 627, 25440, 284, 1326, 72, 1426, 325, 11, 949, 3099, 2377, 3301, 16175, 28749, 390, 275, 641, 264, 10205, 1261, 3099, 334, 2611, 275, 291, 1548, 8326, 13, 198, 198, 4965, 7353, 64, 25, 198, 198, 8206, 78, 25, 47, 273, 1275, 22064, 12379, 442, 84, 6862, 11, 267, 33104, 1516, 78, 11, 7758, 17899, 640, 466, 39452, 346, 11, 277, 291, 280, 5026, 48342, 283, 257, 2457, 12379, 5261, 83, 324, 2850, 13, 367, 6557, 285, 5013, 418, 7332, 771, 2850, 16176, 78, 33104, 1516, 78, 11]])

prompt = '''Instrução: Com base no texto abaixo, responda à pergunta:

Texto:Por causa da chuva, o Flamengo, melhor time do Brasil, ficou sem jogar a final da Libertadores. Há muitos torcedores pelo Flamengo, o melhor time, na minha Família. Além da bicicleta, em 1990, eu tinha a honra de ser flamenguista.  Ontem, quando reli os documentos do tribunal, descobri que em 1990 quando tomei posse, minha declaração de bens só continha uma bicicleta.

Pergunta:Qual o melhor time do Brasil?
Resposta:'''


def parse_answer(tokens, start_sequence, stop_sequence, skips):
    #tokens = tokens.squeeze()
    check_index = 0
    status = 'ignoring'
    start_index = 0
    stop_index = len(tokens)
    for index, token in enumerate(tokens):
        if status in ['ignoring', 'starting']:
            if token == start_sequence[check_index]:
                status = 'starting'
                check_index += 1
                if check_index == len(start_sequence):
                    check_index = 0
                    if skips <= 0:
                        status = 'getting'
                        start_index = index + 1
                    else:
                        status = 'ignoring'
                        skips -= 1
            else:
                check_index = 0
        elif status in ['getting', 'stopping']:
            if token == stop_sequence[check_index]:
                status = 'stopping'
                check_index += 1
                if check_index == len(stop_sequence):
                    status = 'stop'
                    stop_index = index + 1 - len(stop_sequence)
                    break
            else:
                check_index = 0
        
    return tokens[start_index:stop_index]#.unsqueeze(dim=0)

def struct_answer(prompt, gen_tokens, start_sequence, stop_sequence, skips, tokenizer):
    result = []
    for i, response in enumerate(gen_tokens):
        gen_text = ''.join(tokenizer.batch_decode(response)).strip()
        answer_tokens = parse_answer(response, start_sequence, stop_sequence, skips)
        answer_text = ''.join(tokenizer.batch_decode(answer_tokens)).strip()
        result.append({'prompt': prompt, 'gen_tokens': response, 'gen_text': gen_text, 'answer_tokens': answer_tokens, 'answer_text': answer_text})
    return result

tokenizer = GPT2Tokenizer.from_pretrained('EleutherAI/gpt-neo-1.3B', use_fast=False)

start_sequence = tokenizer('Resposta:', return_tensors="pt").input_ids.squeeze()
stop_sequence = tokenizer(['.', '\n', '\n'], return_tensors="pt").input_ids.squeeze()
skips = 0

answers = struct_answer(prompt, gen_tokens, start_sequence, stop_sequence, skips, tokenizer)

print(answers)